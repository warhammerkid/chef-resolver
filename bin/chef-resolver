#!/usr/bin/env ruby

require 'yaml'
require 'tempfile'
require 'fileutils'
require 'chef/resolver_server'

config_path = "#{ENV['HOME']}/.chef-resolver.yml"
launch_agent_path = "#{ENV['HOME']}/Library/LaunchAgents/com.chromedshark.chef-resolver.plist"
dns_port = 20570

# Fail install/uninstall if we're not on OS X >= 10.6.0
if ARGV[0] == 'install' || ARGV[0] == 'uninstall'
  die 'chef-resolver requires OS X' unless RUBY_PLATFORM.downcase.include?('darwin')
  vers = `sw_vers -productVersion`.split('.').map {|p| p.to_i}
  die 'chef-resolver requires OS X 10.6 or greater' unless vers[1] >= 6
end

# Install/Uninstall
if ARGV[0] == 'install'
  # Install default config file
  unless File.exist?(config_path)
    File.open(config_path, 'w') do |f|
      f.write <<-DEFAULT_CONFIG
# # Access with role.config_name.chef
# config_name:
#   knife_file: /full/path/to/knife.rb
#   env: # optional
#     CHEF_ENV: production
DEFAULT_CONFIG
    end
  end

  # Install launchd script for dns server
  File.open(launch_agent_path, 'w') do |f|
    f.write <<-LAUNCH_PLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>Label</key>
        <string>com.chromedshark.chef-resolver</string>
        <key>ProgramArguments</key>
        <array>
                <string>chef-resolver</string>
        </array>
        <key>KeepAlive</key>
        <true/>
        <key>RunAtLoad</key>
        <true/>
</dict>
</plist>
LAUNCH_PLIST
  end

  # Start server
  `launchctl unload "#{launch_agent_path}" 2>/dev/null`
  `launchctl load -Fw "#{launch_agent_path}" 2>/dev/null`

  # Install resolver
  resolver = Tempfile.new('chef')
  resolver.write <<-RESOLVER
# Generated by chef-resolver
nameserver 127.0.0.1
port #{dns_port}
RESOLVER
  resolver.close
  begin
    FileUtils.mkdir '/etc/resolver', :mode => 0755 unless File.exist?('/etc/resolver')
    FileUtils.cp(resolver.path, '/etc/resolver/chef')
  rescue
    puts "Installing system configuration files as root"
    `sudo mkdir -m 0755 /etc/resolver 2>/dev/null`
    `sudo cp #{resolver.path} /etc/resolver/chef`
  end
  resolver.unlink

  puts <<-MSG
chef-resolver installed

Check out #{config_path} for instructions on configuring
MSG
  exit 0
elsif ARGV[0] == 'uninstall'
  # Uninstall server
  `launchctl unload "#{launch_agent_path}" 2>/dev/null`
  FileUtils.rm launch_agent_path, :force => true

  # Remove resolver
  if File.exist?('/etc/resolver/chef')
    begin
      FileUtils.rm('/etc/resolver/chef')
    rescue
      cmd = 'sudo rm /etc/resolver/chef'
      puts cmd
      `#{cmd}`
    end
  end

  puts "chef-resolver uninstalled"
  exit 0
end

# Start server
Thread.abort_on_exception = true
dns = Chef::ResolverServer.new dns_port, config_path, true
dns.start
Thread.stop